---
# Source: csi-cloudscale/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-cloudscale-controller-sa
  namespace: kube-system
---
# Source: csi-cloudscale/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-cloudscale-node-sa
  namespace: kube-system
---
# Source: csi-cloudscale/templates/storageclass.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: cloudscale-volume-ssd
  namespace: kube-system
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: csi.cloudscale.ch
allowVolumeExpansion: true
reclaimPolicy: Delete
volumeBindingMode: Immediate
parameters:
  csi.cloudscale.ch/volume-type: ssd
---
# Source: csi-cloudscale/templates/storageclass.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: cloudscale-volume-ssd-luks
  namespace: kube-system
provisioner: csi.cloudscale.ch
allowVolumeExpansion: true
reclaimPolicy: Delete
volumeBindingMode: Immediate
parameters:
  csi.cloudscale.ch/volume-type: ssd
  csi.cloudscale.ch/luks-encrypted: "true"
  csi.cloudscale.ch/luks-cipher: "aes-xts-plain64"
  csi.cloudscale.ch/luks-key-size: "512"
  csi.storage.k8s.io/node-stage-secret-namespace: ${pvc.namespace}
  csi.storage.k8s.io/node-stage-secret-name: ${pvc.name}-luks-key
---
# Source: csi-cloudscale/templates/storageclass.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: cloudscale-volume-bulk
  namespace: kube-system
provisioner: csi.cloudscale.ch
allowVolumeExpansion: true
reclaimPolicy: Delete
volumeBindingMode: Immediate
parameters:
  csi.cloudscale.ch/volume-type: bulk
---
# Source: csi-cloudscale/templates/storageclass.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: cloudscale-volume-bulk-luks
  namespace: kube-system
provisioner: csi.cloudscale.ch
allowVolumeExpansion: true
reclaimPolicy: Delete
volumeBindingMode: Immediate
parameters:
  csi.cloudscale.ch/volume-type: bulk
  csi.cloudscale.ch/luks-encrypted: "true"
  csi.cloudscale.ch/luks-cipher: "aes-xts-plain64"
  csi.cloudscale.ch/luks-key-size: "512"
  csi.storage.k8s.io/node-stage-secret-namespace: ${pvc.namespace}
  csi.storage.k8s.io/node-stage-secret-name: ${pvc.name}-luks-key
---
# Source: csi-cloudscale/templates/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-cloudscale-provisioner-role
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["get", "list"]
  - apiGroups: [ "storage.k8s.io" ]
    resources: [ "csinodes" ]
    verbs: [ "get", "list", "watch" ]
  - apiGroups: [ "" ]
    resources: [ "nodes" ]
    verbs: [ "get", "list", "watch" ]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch"]
---
# Source: csi-cloudscale/templates/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-cloudscale-attacher-role
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["csinodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments/status"]
    verbs: ["patch"]
---
# Source: csi-cloudscale/templates/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-cloudscale-resizer-role
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims/status"]
    verbs: ["update", "patch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
---
# Source: csi-cloudscale/templates/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-cloudscale-node-driver-registrar-role
  namespace: kube-system
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
---
# Source: csi-cloudscale/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-cloudscale-provisioner-binding
subjects:
  - kind: ServiceAccount
    name: csi-cloudscale-controller-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-cloudscale-provisioner-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: csi-cloudscale/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-cloudscale-resizer-binding
subjects:
  - kind: ServiceAccount
    name: csi-cloudscale-controller-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-cloudscale-resizer-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: csi-cloudscale/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-cloudscale-attacher-binding
subjects:
  - kind: ServiceAccount
    name: csi-cloudscale-controller-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-cloudscale-attacher-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: csi-cloudscale/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-cloudscale-node-driver-registrar-binding
subjects:
  - kind: ServiceAccount
    name: csi-cloudscale-node-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-cloudscale-node-driver-registrar-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: csi-cloudscale/templates/daemonset.yaml
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: csi-cloudscale-node
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: csi-cloudscale-node
  template:
    metadata:
      labels:
        app: csi-cloudscale-node
        role: csi-cloudscale
    spec:
      priorityClassName: system-node-critical
      serviceAccount: csi-cloudscale-node-sa
      hostNetwork: true
      containers:
        - name: csi-node-driver-registrar
          image: "registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.5.1"
          imagePullPolicy: IfNotPresent
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
            - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "rm -rf /registration/csi.cloudscale.ch /registration/csi.cloudscale.ch-reg.sock"]
          env:
            - name: ADDRESS
              value: /csi/csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: /var/lib/kubelet/plugins/csi.cloudscale.ch/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi/
            - name: registration-dir
              mountPath: /registration/
        - name: csi-cloudscale-plugin
          image: "quay.io/cloudscalech/cloudscale-csi-plugin:v3.5.4"
          imagePullPolicy: IfNotPresent
          args :
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--url=$(CLOUDSCALE_API_URL)"
          env:
            - name: CSI_ENDPOINT
              value: unix:///csi/csi.sock
            - name: CLOUDSCALE_API_URL
              value: https://api.cloudscale.ch/
            - name: CLOUDSCALE_MAX_CSI_VOLUMES_PER_NODE
              value: "125"
            - name: CLOUDSCALE_ACCESS_TOKEN
              valueFrom:
                secretKeyRef:
                  name: cloudscale
                  key: access-token
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi
            - name: pods-mount-dir
              mountPath: /var/lib/kubelet
              # needed so that any mounts setup inside this container are
              # propagated back to the host machine.
              mountPropagation: "Bidirectional"
            - name: device-dir
              mountPath: /dev
            - name: tmpfs
              mountPath: /tmp
      volumes:
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: DirectoryOrCreate
        - name: plugin-dir
          hostPath:
            path: /var/lib/kubelet/plugins/csi.cloudscale.ch
            type: DirectoryOrCreate
        - name: pods-mount-dir
          hostPath:
            path: /var/lib/kubelet
            type: Directory
        - name: device-dir
          hostPath:
            path: /dev
        # to make sure temporary stored luks keys never touch a disk
        - name: tmpfs
          emptyDir:
            medium: Memory
---
# Source: csi-cloudscale/templates/statefulset.yaml
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: csi-cloudscale-controller
  namespace: kube-system
spec:
  serviceName: "csi-cloudscale"
  selector:
    matchLabels:
      app: csi-cloudscale-controller
  replicas: 1
  template:
    metadata:
      labels:
        app: csi-cloudscale-controller
        role: csi-cloudscale
    spec:
      hostNetwork: true
      priorityClassName: system-cluster-critical
      serviceAccount: csi-cloudscale-controller-sa
      containers:
        - name: csi-provisioner
          image: "registry.k8s.io/sig-storage/csi-provisioner:v3.2.1"
          imagePullPolicy: IfNotPresent
          args:
            - "--csi-address=$(ADDRESS)"
            - "--default-fstype=ext4"
            - "--v=5"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-attacher
          image: "registry.k8s.io/sig-storage/csi-attacher:v4.0.0"
          imagePullPolicy: IfNotPresent
          args:
            - "--csi-address=$(ADDRESS)"
            - "--v=5"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-resizer
          image: "registry.k8s.io/sig-storage/csi-resizer:v1.6.0"
          args:
            - "--csi-address=$(ADDRESS)"
            - "--timeout=30s"
            - "--v=5"
            - "--handle-volume-inuse-error=false"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-cloudscale-plugin
          image: "quay.io/cloudscalech/cloudscale-csi-plugin:v3.5.4"
          args :
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--url=$(CLOUDSCALE_API_URL)"
          env:
            - name: CSI_ENDPOINT
              value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
            - name: CLOUDSCALE_API_URL
              value: https://api.cloudscale.ch/
            - name: CLOUDSCALE_ACCESS_TOKEN
              valueFrom:
                secretKeyRef:
                  name: cloudscale
                  key: access-token
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
      volumes:
        - name: socket-dir
          emptyDir: {}
---
# Source: csi-cloudscale/templates/csi_driver.yaml
apiVersion: storage.k8s.io/v1
kind: CSIDriver
metadata:
  name: csi.cloudscale.ch
spec:
  attachRequired: true
  podInfoOnMount: true
